// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountRole {
  MEMBER
  SUPPORT
  ADMINISTRATOR
}

enum ServerStatus {
  OFFLINE
  MAINTENANCE
  ONLINE
}

enum Resource {
  FOOD
  WATER
  WOOD
  STONE
}

model Biome {
  id            String  @id @default(uuid())
  name          String
  temperature   Decimal
  precipitation Decimal
  Tile          Tile[]
}

model Account {
  id            String      @id @default(uuid())
  email         String      @unique
  passwordHash  String
  userAuthToken String      @unique
  role          AccountRole @default(MEMBER)
  profile       Profile?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Profile {
  id       String @id @default(uuid())
  username String @unique

  profileServerData ProfileServerData[]

  account   Account @relation(fields: [accountId], references: [id])
  accountId String  @unique
}

model ProfileServerData {
  profileId String @unique
  serverId  String @unique

  settlements Settlement[]

  profile Profile @relation(fields: [profileId], references: [id])
  server  Server  @relation(fields: [serverId], references: [id])

  @@unique([profileId, serverId])
}

model Server {
  id       String       @id @default(uuid())
  name     String       @unique
  hostname String       @default("localhost")
  port     Int          @default(5000)
  status   ServerStatus @default(OFFLINE)

  profileServerData ProfileServerData[]
  worlds            World[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([hostname, port])
}

model World {
  id      String   @id @default(uuid())
  regions Region[]

  server   Server @relation(fields: [serverId], references: [id])
  serverId String
}

model Region {
  id    String @id @default(uuid())
  tiles Tile[]

  world   World  @relation(fields: [worldId], references: [id])
  worldId String
}

model Tile {
  id    String @id @default(uuid())
  biome Biome  @relation(fields: [biomeId], references: [id])

  resources TileResource[]

  settlement   Settlement? @relation(fields: [settlementId], references: [id])
  settlementId String?

  region   Region @relation(fields: [regionId], references: [id])
  regionId String
  biomeId  String
}

model TileResource {
  id       String   @id @default(uuid())
  resource Resource
  value    Int

  tile   Tile   @relation(fields: [tileId], references: [id])
  tileId String

  @@unique([tileId, resource])
}

model Settlement {
  id   String @id @default(uuid())
  name String

  structures SettlementStructure[]
  tile       Tile[]

  profileServerData          ProfileServerData @relation(fields: [profileServerDataProfileId], references: [profileId])
  profileServerDataProfileId String
}

model SettlementStructure {
  id          String              @id @default(uuid())
  name        String
  description String
  modifiers   StructureModifier[]

  settlement   Settlement @relation(fields: [settlementId], references: [id])
  settlementId String
}

model StructureModifier {
  id          String   @id @default(uuid())
  name        String
  description String
  resource    Resource
  value       Int

  settlementStructure   SettlementStructure @relation(fields: [settlementStructureId], references: [id])
  settlementStructureId String
}
