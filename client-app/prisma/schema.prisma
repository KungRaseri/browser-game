// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum AccountRole {
  MEMBER
  SUPPORT
  ADMINISTRATOR
}

enum Resource {
  FOOD
  WATER
  WOOD
  STONE
}

model Account {
  id            String @id @default(uuid())
  email         String @unique
  passwordHash  String
  userAuthToken String @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  role AccountRole @default(MEMBER)

  playerProfiles PlayerProfile[]
}

model PlayerProfile {
  id       String @id @default(uuid())
  username String @unique

  settlements Settlement[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Account   Account? @relation(fields: [accountId], references: [id])
  accountId String?
  Server    Server?  @relation(fields: [serverId], references: [id])
  serverId  String?
}

model Server {
  id     String       @id @default(uuid())
  name   String       @unique
  status ServerStatus @default(OFFLINE)

  playerProfiles PlayerProfile[]
  worlds         World[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ServerStatus {
  OFFLINE
  ONLINE
}

model World {
  id       String   @id @default(uuid())
  index    Int      @default(autoincrement())
  regions  Region[]
  Server   Server?  @relation(fields: [serverId], references: [id])
  serverId String?
}

model Region {
  id      String  @id @default(uuid())
  index   Int     @default(autoincrement())
  tiles   Tile[]
  World   World?  @relation(fields: [worldId], references: [id])
  worldId String?
}

model Tile {
  id        String         @id @default(uuid())
  index     Int            @default(autoincrement())
  resources TileResource[]
  Region    Region?        @relation(fields: [regionId], references: [id])
  regionId  String?
}

model TileResource {
  id       String   @id @default(uuid())
  resource Resource
  value    Int
  Tile     Tile?    @relation(fields: [tileId], references: [id])
  tileId   String?
}

model Settlement {
  id              String                @id @default(uuid())
  name            String
  structures      SettlementStructure[]
  PlayerProfile   PlayerProfile?        @relation(fields: [playerProfileId], references: [id])
  playerProfileId String?
}

model SettlementStructure {
  id           String              @id @default(uuid())
  name         String
  description  String
  modifiers    StructureModifier[]
  actions      StructureAction[]
  Settlement   Settlement?         @relation(fields: [settlementId], references: [id])
  settlementId String?
}

model StructureAction {
  id                    String               @id @default(uuid())
  SettlementStructure   SettlementStructure? @relation(fields: [settlementStructureId], references: [id])
  settlementStructureId String?
}

model StructureModifier {
  id                    String               @id @default(uuid())
  name                  String
  description           String
  resource              Resource
  value                 Int
  SettlementStructure   SettlementStructure? @relation(fields: [settlementStructureId], references: [id])
  settlementStructureId String?
}
