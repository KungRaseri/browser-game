generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String      @id @default(cuid())
  email         String      @unique
  passwordHash  String
  userAuthToken String      @unique
  role          AccountRole @default(MEMBER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  profile       Profile?
}

model Profile {
  id        String              @id @default(cuid())
  username  String              @unique
  picture   String
  accountId String              @unique
  account   Account             @relation(fields: [accountId], references: [id])
  servers   ProfileServerData[]
}

model ProfileServerData {
  profileId   String       @unique
  serverId    String       @unique
  profile     Profile      @relation(fields: [profileId], references: [id])
  server      Server       @relation(fields: [serverId], references: [id])
  settlements Settlement[]

  @@unique([profileId, serverId])
}

model Server {
  id        String              @id @default(cuid())
  name      String              @unique
  hostname  String              @default("localhost")
  port      Int                 @default(5000)
  status    ServerStatus        @default(OFFLINE)
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  players   ProfileServerData[]
  worlds    World[]

  @@unique([hostname, port])
}

model World {
  id                    String   @id @default(cuid())
  name                  String
  elevationSettings     Json
  precipitationSettings Json
  temperatureSettings   Json
  serverId              String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  regions               Region[]
  server                Server   @relation(fields: [serverId], references: [id])

  @@unique([name, serverId])
}

model Region {
  id               String @id @default(cuid())
  xCoord           Int    @default(-1)
  yCoord           Int    @default(-1)
  name             String
  elevationMap     Json
  precipitationMap Json
  temperatureMap   Json
  worldId          String
  world            World  @relation(fields: [worldId], references: [id])
  tiles            Tile[]

  @@unique([name, worldId])
}

model Tile {
  id            String   @id @default(cuid())
  elevation     Float
  temperature   Float
  precipitation Float
  type          TileType
  regionId      String
  biomeId       String
  Plots         Plot[]
  Region        Region   @relation(fields: [regionId], references: [id])
  Biome         Biome    @relation(fields: [biomeId], references: [id])
}

model Biome {
  id               String @id @default(cuid())
  name             String @unique
  precipitationMin Float
  precipitationMax Float
  temperatureMin   Float
  temperatureMax   Float
  Tile             Tile[]
}

model Resource {
  id   String @id @default(cuid())
  name String @unique
}

model Plot {
  id               String         @id @default(cuid())
  tileId           String
  attributes       PlotAttributes @relation(fields: [plotAttributesId], references: [id])
  Settlement       Settlement?
  Tile             Tile           @relation(fields: [tileId], references: [id])
  plotAttributesId String         @unique
}

model PlotAttributes {
  id        String @id @default(cuid())
  fertility Int
  solar     Int
  wind      Int
  forest    Int
  rocks     Int
  minerals  Int
  wildlife  Int
  area      Int
  plotId    String
  Plot      Plot?

  @@unique([id, plotId])
}

model Settlement {
  id              String                @id @default(cuid())
  name            String
  plotId          String                @unique
  playerProfileId String
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
  Plot            Plot                  @relation(fields: [plotId], references: [id])
  PlayerProfile   ProfileServerData     @relation(fields: [playerProfileId], references: [profileId])
  structures      SettlementStructure[]
}

model SettlementStructure {
  id                    String              @id @default(cuid())
  name                  String
  description           String
  areaRequirement       Int
  populationRequirement Int
  settlementId          String
  settlement            Settlement          @relation(fields: [settlementId], references: [id])
  modifiers             StructureModifier[]
}

model StructureModifier {
  id                    String @id @default(cuid())
  name                  String
  description           String
  value                 Int
  settlementStructureId String

  settlementStructure SettlementStructure @relation(fields: [settlementStructureId], references: [id])
}

enum AccountRole {
  MEMBER
  SUPPORT
  ADMINISTRATOR
}

enum ServerStatus {
  OFFLINE
  MAINTENANCE
  ONLINE
}

enum TileType {
  OCEAN
  LAND
}
