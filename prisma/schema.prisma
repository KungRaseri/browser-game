generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id            String      @id @default(uuid())
  email         String      @unique
  passwordHash  String
  userAuthToken String      @unique
  role          AccountRole @default(MEMBER)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  profile       Profile?
}

model Profile {
  id        String             @id @default(uuid())
  username  String             @unique
  picture   String
  accountId String             @unique
  account   Account            @relation(fields: [accountId], references: [id])
  servers   ProfileServerData?
}

model ProfileServerData {
  profileId  String       @unique
  serverId   String       @unique
  profile    Profile      @relation(fields: [profileId], references: [id])
  server     Server       @relation(fields: [serverId], references: [id])
  Settlement Settlement[]

  @@unique([profileId, serverId])
}

model Server {
  id        String             @id @default(uuid())
  name      String             @unique
  hostname  String             @default("localhost")
  port      Int                @default(5000)
  status    ServerStatus       @default(OFFLINE)
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  players   ProfileServerData?
  worlds    World[]

  @@unique([hostname, port])
}

model World {
  id                    String   @id @default(uuid())
  name                  String   @unique
  elevationSettings     Json
  precipitationSettings Json
  temperatureSettings   Json
  serverId              String
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  regions               Region[]
  server                Server   @relation(fields: [serverId], references: [id])
}

model Region {
  id               String @id @default(uuid())
  name             String
  elevationMap     Json
  precipitationMap Json
  temperatureMap   Json
  worldId          String
  world            World  @relation(fields: [worldId], references: [id])
  tiles            Tile[]

  @@unique([name, worldId])
}

model Tile {
  id            String      @id @default(uuid())
  elevation     Float
  temperature   Float
  precipitation Float
  type          TileType
  regionId      String
  settlementId  String?
  biomeId       String
  Plots         Plot[]
  Biome         Biome       @relation(fields: [biomeId], references: [id])
  Region        Region      @relation(fields: [regionId], references: [id])
  Settlement    Settlement? @relation(fields: [settlementId], references: [id])
}

model Biome {
  id               String @id @default(uuid())
  name             String @unique
  precipitationMin Float
  precipitationMax Float
  temperatureMin   Float
  temperatureMax   Float
  Tile             Tile[]
}

model PlotResource {
  id         String   @id @default(uuid())
  value      Int
  plotId     String?
  resourceId String
  Plot       Plot?    @relation(fields: [plotId], references: [id])
  Resource   Resource @relation(fields: [resourceId], references: [id])

  @@unique([plotId, resourceId])
}

model Resource {
  id                String              @id @default(uuid())
  name              String              @unique
  PlotResource      PlotResource[]
  StructureModifier StructureModifier[]
}

model Plot {
  id           String         @id @default(uuid())
  settlementId String?
  tileId       String
  Settlement   Settlement?    @relation(fields: [settlementId], references: [id])
  Tile         Tile           @relation(fields: [tileId], references: [id])
  resources    PlotResource[]
}

model Settlement {
  id                         String                @id @default(uuid())
  name                       String
  profileServerDataProfileId String
  createdAt                  DateTime              @default(now())
  updatedAt                  DateTime              @updatedAt
  Plot                       Plot[]
  ProfileServerData          ProfileServerData     @relation(fields: [profileServerDataProfileId], references: [profileId])
  structures                 SettlementStructure[]
  Tile                       Tile[]
}

model SettlementStructure {
  id           String              @id @default(uuid())
  name         String
  description  String
  settlementId String
  settlement   Settlement          @relation(fields: [settlementId], references: [id])
  modifiers    StructureModifier[]
}

model StructureModifier {
  id                    String              @id @default(uuid())
  name                  String
  description           String
  value                 Int
  settlementStructureId String
  resourceId            String
  resource              Resource            @relation(fields: [resourceId], references: [id])
  settlementStructure   SettlementStructure @relation(fields: [settlementStructureId], references: [id])
}

enum AccountRole {
  MEMBER
  SUPPORT
  ADMINISTRATOR
}

enum ServerStatus {
  OFFLINE
  MAINTENANCE
  ONLINE
}

enum TileType {
  OCEAN
  LAND
}
